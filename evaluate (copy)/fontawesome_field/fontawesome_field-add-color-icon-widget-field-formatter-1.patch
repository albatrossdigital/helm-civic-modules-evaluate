diff --git a/fontawesome_field.info b/fontawesome_field.info
index b7174db..c3f7604 100644
--- a/fontawesome_field.info
+++ b/fontawesome_field.info
@@ -3,4 +3,4 @@ description = Creates a field type for the Font Awesome library
 version = 7.x-1.x
 core = 7.x
 
-dependencies[] = fontawesome
+;dependencies[] = fontawesome
diff --git a/fontawesome_field.install b/fontawesome_field.install
index 1bf5fd8..0cce702 100644
--- a/fontawesome_field.install
+++ b/fontawesome_field.install
@@ -70,6 +70,12 @@ function fontawesome_field_field_schema($field) {
       'not null' => FALSE,
       'default' => 0,
     ),
+    'color' => array(
+      'type' => 'varchar',
+      'length' => 7,
+      'not null' => FALSE,
+      'description' => 'Icon color',
+    ),
   );
 
   $indexes = array(
@@ -78,3 +84,33 @@ function fontawesome_field_field_schema($field) {
 
   return array('columns' => $columns, 'indexes' => $indexes);
 }
+
+
+/**
+ * Adds the color column
+ */
+function fontawesome_field_update_7001(&$sandbox) {
+  foreach (field_info_fields() as $field_name => $field) {
+    if ($field['type'] != 'fontawesome_field') {
+      // Not a fontawesome field.
+      continue;
+    }
+
+    $table_name = _field_sql_storage_tablename($field);
+    $revision_table_name = _field_sql_storage_revision_tablename($field);
+
+    db_add_field($table_name, $field_name . '_color', array(
+      'type' => 'varchar',
+      'length' => 7,
+      'not null' => FALSE,
+      'description' => 'Icon color',
+    ));
+
+    db_add_field($revision_table_name, $field_name . '_color', array(
+      'type' => 'varchar',
+      'length' => 7,
+      'not null' => FALSE,
+      'description' => 'Icon color',
+    ));
+  }
+}
\ No newline at end of file
diff --git a/fontawesome_field.module b/fontawesome_field.module
index 9c1d63f..8e2cf3c 100644
--- a/fontawesome_field.module
+++ b/fontawesome_field.module
@@ -43,144 +43,308 @@ function fontawesome_field_field_widget_info() {
     'field types' => array('fontawesome_field'),
   );
 
+  $widgets['fontawesome_field_widget_color'] = array(
+    'label' => t('Icon and Color'),
+    'field types' => array('fontawesome_field'),
+  );
+
   return $widgets;
 }
 
 
+
+/**
+ * Implements hook_field_settings_form().
+ *
+ * Handle the parameters for a field.
+ */
+function fontawesome_field_field_settings_form($field, $instance, $has_data) {
+  $settings = $field['settings'];
+  $form = array();
+  switch ($instance['widget']['type']) {
+    
+    case 'fontawesome_field_widget_color':
+      $form['default_colors'] = array(
+        '#type' => 'textarea',
+        '#title' => t('Default colors'),
+        '#default_value' => isset($settings['default_colors']) ? $settings['default_colors'] : $colors = variable_get('fontawesome_field_default_colors', FALSE) ? $colors : '
+#AC725E,#D06B64,#F83A22,#FA573C,#FF7537,#FFAD46
+#42D692,#16A765,#7BD148,#B3DC6C,#FBE983
+#92E1C0,#9FE1E7,#9FC6E7,#4986E7,#9A9CFF
+#B99AFF,#C2C2C2,#CABDBF,#CCA6AC,#F691B2
+#CD74E6,#A47AE2
+        ',
+        '#required' => TRUE,
+        '#description' => t('Default colors for pre-selected color boxes'),
+      );
+      break;
+  }
+  return $form;
+}
+
+
+
 function fontawesome_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
-  $process_hack = array('fontawesome_field_ignore_parent');
+  switch ($instance['widget']['type']) {
 
-  $required = $element['#required'];
-  $item =& $items[$delta];
+    case 'fontawesome_field_widget':
+      $process_hack = array('fontawesome_field_ignore_parent');
 
-  $field_id = 'fontawesome-field-' .rand(10000,99999);
+      $required = $element['#required'];
+      $item =& $items[$delta];
 
-  $element['wrapper'] = array(
-    '#prefix' => '<div id="'. $field_id .'" class="font-awesome-field-admin-wrapper"><label>' . $instance['label'] . '</label>',
-    '#suffix' => '</div>',
-    '#process' => $process_hack,
-  );
+      $field_id = 'fontawesome-field-' .rand(10000,99999);
 
-  $element['wrapper']['preview'] = array(
-    '#prefix' => '<div class="container"><div class="fontawesome-icon-preview"><p>Preview</p>',
-    '#suffix' => '</div></div>',
-  );
+      $element['wrapper'] = array(
+        '#prefix' => '<div id="'. $field_id .'" class="font-awesome-field-admin-wrapper"><label>' . $instance['label'] . '</label>',
+        '#suffix' => '</div>',
+        '#process' => $process_hack,
+      );
 
-  $containers = array(
-    array('icon'), array('size'), array('invert','fixed_width','border','spinning'), array('rotation'), array('flip'),
-  );
+      $element['wrapper']['preview'] = array(
+        '#prefix' => '<div class="container"><div class="fontawesome-icon-preview"><p>Preview</p>',
+        '#suffix' => '</div></div>',
+      );
 
-  $fa_fields['icon'] = array(
-    '#title' => t('Icon'),
-    '#type' => 'select',
-    '#default_value' => isset($item['icon']) ? $item['icon'] : null,
-    '#options' => fontawesome_field_get_option_list('icons'),
-    '#required' => $required,
-    '#attributes' => array('class' => array('fontawesome-icon','faf-watch')),
-  );
+      $containers = array(
+        array('icon'), array('size'), array('invert','fixed_width','border','spinning'), array('rotation'), array('flip'),
+      );
 
-  $fa_fields['size'] = array(
-    '#title' => t('Size Adjustment'),
-    '#type' => 'select',
-    '#default_value' => isset($item['size']) ? $item['size'] : null,
-    '#options' => fontawesome_field_get_option_list('modifiers','size'),
-    '#attributes' => array('class' => array('fontawesome-size','faf-watch')),
-  );
+      $fa_fields['icon'] = array(
+        '#title' => t('Icon'),
+        '#type' => 'select',
+        '#default_value' => isset($item['icon']) ? $item['icon'] : null,
+        '#options' => fontawesome_field_get_option_list('icons'),
+        '#required' => $required,
+        '#attributes' => array('class' => array('fontawesome-icon','faf-watch')),
+      );
 
-  $fa_fields['invert'] = array(
-    '#title' => t('Inverse Color'),
-    '#type' => 'checkbox',
-    '#default_value' => isset($item['invert']) ? $item['invert'] : 0,
-    '#attributes' => array('class' => array('fontawesome-invert','faf-watch')),
-  );
+      $fa_fields['size'] = array(
+        '#title' => t('Size Adjustment'),
+        '#type' => 'select',
+        '#default_value' => isset($item['size']) ? $item['size'] : null,
+        '#options' => fontawesome_field_get_option_list('modifiers','size'),
+        '#attributes' => array('class' => array('fontawesome-size','faf-watch')),
+      );
 
-  $fa_fields['fixed_width'] = array(
-    '#title' => t('Fixed Width'),
-    '#type' => 'checkbox',
-    '#default_value' => isset($item['fixed_width']) ? $item['fixed_width'] : 0,
-    '#attributes' => array('class' => array('fontawesome-fixed-width','faf-watch')),
-  );
+      $fa_fields['invert'] = array(
+        '#title' => t('Inverse Color'),
+        '#type' => 'checkbox',
+        '#default_value' => isset($item['invert']) ? $item['invert'] : 0,
+        '#attributes' => array('class' => array('fontawesome-invert','faf-watch')),
+      );
 
-  $fa_fields['border'] = array(
-    '#title' => t('Add Border'),
-    '#type' => 'checkbox',
-    '#default_value' => isset($item['border']) ? $item['border'] : 0,
-    '#attributes' => array('class' => array('fontawesome-border','faf-watch')),
-  );
+      $fa_fields['fixed_width'] = array(
+        '#title' => t('Fixed Width'),
+        '#type' => 'checkbox',
+        '#default_value' => isset($item['fixed_width']) ? $item['fixed_width'] : 0,
+        '#attributes' => array('class' => array('fontawesome-fixed-width','faf-watch')),
+      );
 
-  $fa_fields['spinning'] = array(
-    '#title' => t('Spin Icon'),
-    '#type' => 'checkbox',
-    '#default_value' => isset($item['spinning']) ? $item['spinning'] : 0,
-    '#attributes' => array('class' => array('fontawesome-spinning','faf-watch')),
-  );
+      $fa_fields['border'] = array(
+        '#title' => t('Add Border'),
+        '#type' => 'checkbox',
+        '#default_value' => isset($item['border']) ? $item['border'] : 0,
+        '#attributes' => array('class' => array('fontawesome-border','faf-watch')),
+      );
 
-  $fa_fields['rotation'] = array(
-    '#title' => t('Rotate Icon'),
-    '#type' => 'select',
-    '#default_value' => isset($item['rotation']) ? $item['rotation'] : null,
-    '#options' => fontawesome_field_get_option_list('modifiers','rotate'),
-    '#attributes' => array('class' => array('fontawesome-rotation','faf-watch')),
-  );
+      $fa_fields['spinning'] = array(
+        '#title' => t('Spin Icon'),
+        '#type' => 'checkbox',
+        '#default_value' => isset($item['spinning']) ? $item['spinning'] : 0,
+        '#attributes' => array('class' => array('fontawesome-spinning','faf-watch')),
+      );
 
-  $fa_fields['flip'] = array(
-    '#title' => t('Flip Icon'),
-    '#type' => 'fieldset',
-    '#process' => $process_hack,
-  );
+      $fa_fields['rotation'] = array(
+        '#title' => t('Rotate Icon'),
+        '#type' => 'select',
+        '#default_value' => isset($item['rotation']) ? $item['rotation'] : null,
+        '#options' => fontawesome_field_get_option_list('modifiers','rotate'),
+        '#attributes' => array('class' => array('fontawesome-rotation','faf-watch')),
+      );
 
-  $fa_fields['flip']['flip_horizontal'] = array(
-    '#title' => t('Horizontally'),
-    '#type' => 'checkbox',
-    '#default_value' => isset($item['flip_horizontal']) ? $item['flip_horizontal'] : 0,
-    '#attributes' => array('class' => array('fontawesome-flip-horizontal','faf-watch')),
-  );
+      $fa_fields['flip'] = array(
+        '#title' => t('Flip Icon'),
+        '#type' => 'fieldset',
+        '#process' => $process_hack,
+      );
 
-  $fa_fields['flip']['flip_vertical'] = array(
-    '#title' => t('Vertically'),
-    '#type' => 'checkbox',
-    '#default_value' => isset($item['flip_vertical']) ? $item['flip_vertical'] : 0,
-    '#attributes' => array('class' => array('fontawesome-flip-vertical','faf-watch')),
-  );
+      $fa_fields['flip']['flip_horizontal'] = array(
+        '#title' => t('Horizontally'),
+        '#type' => 'checkbox',
+        '#default_value' => isset($item['flip_horizontal']) ? $item['flip_horizontal'] : 0,
+        '#attributes' => array('class' => array('fontawesome-flip-horizontal','faf-watch')),
+      );
 
-  // add the #states to each field except the icon choosing field
-  foreach($fa_fields as $k => &$v) {
-    if($k != 'icon') {
-      $v['#states'] = array(
-        'invisible' => array(
-          '#' . $field_id . ' select.fontawesome-icon' => array('value' => '0'),
-        ),
+      $fa_fields['flip']['flip_vertical'] = array(
+        '#title' => t('Vertically'),
+        '#type' => 'checkbox',
+        '#default_value' => isset($item['flip_vertical']) ? $item['flip_vertical'] : 0,
+        '#attributes' => array('class' => array('fontawesome-flip-vertical','faf-watch')),
       );
-    }
-  }
 
-  // dump the fiels inside containers, add the process hack
-  foreach($containers as $idx => $fields) {
-    $key = 'container-' . $idx;
-    $element['wrapper'][$key] = array(
-      '#prefix' => '<div class="container">',
-      '#suffix' => '</div>',
-      '#process' => $process_hack,
-    );
-
-    foreach($fields as $field_name) {
-      $element['wrapper'][$key][$field_name] = $fa_fields[$field_name];
-    }
-  }
+      // add the #states to each field except the icon choosing field
+      foreach($fa_fields as $k => &$v) {
+        if($k != 'icon') {
+          $v['#states'] = array(
+            'invisible' => array(
+              '#' . $field_id . ' select.fontawesome-icon' => array('value' => '0'),
+            ),
+          );
+        }
+      }
+
+      // dump the fiels inside containers, add the process hack
+      foreach($containers as $idx => $fields) {
+        $key = 'container-' . $idx;
+        $element['wrapper'][$key] = array(
+          '#prefix' => '<div class="container">',
+          '#suffix' => '</div>',
+          '#process' => $process_hack,
+        );
+
+        foreach($fields as $field_name) {
+          $element['wrapper'][$key][$field_name] = $fa_fields[$field_name];
+        }
+      }
 
-  $element['#attached']['css'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.css';
-  $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.js';
+      $element['#attached']['css'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.css';
+      $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.js';
+
+      // last but not least, let's see if we can use select2
+      $select2 = libraries_load('select2');
+      if($select2['loaded']) {
+        $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.select2.js';
+      }
+      break;
+
+
+    case 'fontawesome_field_widget_color': 
+      $process_hack = array('fontawesome_field_ignore_parent');
+
+      $required = $element['#required'];
+      $item =& $items[$delta];
+
+      $field_id = 'fontawesome-field-' .rand(10000,99999);
+
+      $element['wrapper'] = array(
+        '#prefix' => '<div id="'. $field_id .'" class="font-awesome-field-admin-wrapper"><label>' . $instance['label'] . '</label>',
+        '#suffix' => '</div>',
+        '#process' => $process_hack,
+      );
+
+      $element['wrapper']['preview'] = array(
+        '#prefix' => '<div class="container"><div class="fontawesome-icon-preview"><p>Preview</p>',
+        '#suffix' => '</div></div>',
+      );
+
+      $containers = array(
+        array('icon'), array('color'),
+      );
+
+      $fa_fields['icon'] = array(
+        '#title' => t('Icon'),
+        '#type' => 'select',
+        '#default_value' => isset($item['icon']) ? $item['icon'] : null,
+        '#options' => fontawesome_field_get_option_list('icons'),
+        '#required' => $required,
+        '#attributes' => array('class' => array('fontawesome-icon','faf-watch', 'fontawesome-preview-field')),
+      );
+
+
+      // Color field code from color_field module (which is required for this functionality)
+      if (module_exists('color_field')) {
+        $value = $item['color'];
+        $widget = array();
+        $field_id = str_replace("_", "-", $field['field_name']) . '-' . $langcode . '-' . $delta;
+        // Support field collection module.
+        isset($element['#field_parents']) ? $bundle_id = implode('-', $element['#field_parents']) : $bundle_id = '';
+        $divid = 'div-' . $field_id . '-' . $bundle_id . '-rgb';
+        $id = 'edit-' . $field_id . '-' . $bundle_id . '-rgb';
+
+        $settings['value'] = $value;
+        $settings['id'] = $id;
+
+        $default_colors = (isset($field['settings']['default_colors'])) ? $field['settings']['default_colors'] : '';
+        preg_match_all("/#[0-9a-fA-F]{6}/", $default_colors, $default_colors, PREG_SET_ORDER);
+        foreach ($default_colors as $color) {
+          $settings['colors'][] = $color[0];
+        }
+
+        $widget += array(
+          '#suffix' => '<label>' . t('!icon Color', array('!icon' => $instance['label'])) . '</label><div id=' . $divid . '></div><div class="description">' . $element['#description'] . '</div>',
+          '#attached' => array(
+            'js' => array(
+              drupal_get_path('module', 'color_field') . '/color_field_default/color_field.js',
+              drupal_get_path('module', 'color_field') . '/color_field_default/color_field.jquery.js',
+              array(
+                'data' => array('color_field' => array('#' . $divid => $settings)),
+                'type' => 'setting',
+              ),
+            ),
+            'css' => array(drupal_get_path('module', 'color_field') . '/color_field_default/color_field.css'),
+          ),
+        );
+
+        $widget += array(
+          '#attributes' => array('class' => array('element-invisible'),'id' => $id),
+          '#type' => 'token',
+          '#default_value' => $value,
+          '#size' => 7,
+          '#maxlength' => 7,
+        );
+        
+        $fa_fields['color'] = $widget;
+
+      }
+
+      // add the #states to each field except the icon choosing field
+      /*foreach($fa_fields as $k => &$v) {
+        if($k != 'icon') {
+          $v['#states'] = array(
+            'invisible' => array(
+              '#' . $field_id . ' select.fontawesome-icon' => array('value' => '0'),
+            ),
+          );
+        }
+      }*/
+
+      // dump the fields inside containers, add the process hack
+      foreach($containers as $idx => $fields) {
+        $key = 'container-' . $idx;
+        $element['wrapper'][$key] = array(
+          '#prefix' => '<div class="container">',
+          '#suffix' => '</div>',
+          '#process' => $process_hack,
+        );
+
+        foreach($fields as $field_name) {
+          $element['wrapper'][$key][$field_name] = $fa_fields[$field_name];
+        }
+      }
+
+      //$element['#attached']['css'][] = drupal_get_path('module','fontawesome_field') . '/preview-app/fontawesome-icon-list.css';
+      //$element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/preview-app/tabcomplete.min.js';
+      //$element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/preview-app/preview-app.js';
+
+      $element['#attached']['css'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.css';
+      $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.js';
+
+      // last but not least, let's see if we can use select2
+      $select2 = libraries_load('select2');
+      if($select2['loaded']) {
+        $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.select2.js';
+      }
+
+      break;
 
-  // last but not least, let's see if we can use select2
-  $select2 = libraries_load('select2');
-  if($select2['loaded']) {
-    $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.select2.js';
   }
 
   return $element;
 }
 
 
+
 /**
  * @param $form
  * @param $form_state
@@ -206,6 +370,14 @@ function fontawesome_field_field_formatter_info() {
       'label' => t('Default Font Awesome field formatter'),
       'field types' => array ('fontawesome_field'),
     ),
+    'fontawesome_field_formatter_color' => array (
+      'label' => t('Colored icon'),
+      'field types' => array ('fontawesome_field'),
+    ),
+    'fontawesome_field_formatter_bg' => array (
+      'label' => t('Colored icon circle'),
+      'field types' => array ('fontawesome_field'),
+    ),
   );
 }
 
@@ -221,6 +393,22 @@ function fontawesome_field_field_formatter_view($entity_type, $entity, $field, $
         $element[$delta]['#markup'] = fontawesome_field_render($item);
       }
       break;
+
+    case 'fontawesome_field_formatter_color':
+      foreach ($items as $delta => $item) {
+        $element[$delta]['#markup'] = str_replace('i class', 'i style="background-color:red" class', fontawesome_field_render($item));
+      }
+      break;
+
+    case 'fontawesome_field_formatter_bg':
+      foreach ($items as $delta => $item) {
+        $element[$delta]['#markup'] = fontawesome_field_render_bg($item);
+        $element[$delta]['#attached'] = array(
+          'css' => array(drupal_get_path('module', 'fontawesome_field') . '/fontawesome_field.css'),
+        );
+      }
+      break;
+
   }
   return $element;
 }
@@ -256,6 +444,11 @@ function fontawesome_field_render($item) {
   return '<i class="' . implode(" ", $classes) . '"></i>';
 }
 
+
+function fontawesome_field_render_bg($item) {
+  return '<div class="font-awesome-field-icon-circle" style="background-color:red">' . fontawesome_field_render($item) . '</div>';
+}
+
 /**
  * @param $type
  * @return array
@@ -279,7 +472,6 @@ function fontawesome_field_get_option_list($type, $subset = null) {
     }
   }
 
-  //dpm($options);
   return $options;
 }
 
@@ -324,8 +516,6 @@ function _fontawesome_field_audit() {
     }
   }
 
-  dpm($raw);
-
   return $icons;
 }
 
